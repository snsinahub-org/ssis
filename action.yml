name: 'action yml'
description: 'dotnet restore'
inputs:
  project_path:  
    description: 'path'
    required: true
  project_configuration:  
    description: 'test-path'
    required: true
  output_path:  
    description: 'output_path'
    required: true  
  file_extenstion:  
    description: 'file_extenstion'
    required: false
    default: '*.sln'
  ssis_action:  
    description: 'output_path'
    required: true
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - run: |        
        Start-Process powershell -Verb runAs
        $TMP_DIR="C:\ssis_temp\1"
        if (-Not $(Test-Path -Path "$TMP_DIR")) 
        {
          mkdir "$TMP_DIR"
        }
        if (-Not $(Get-Command SSISDeploy -errorAction SilentlyContinue))
        {            
            echo "Installing SSISDeploy"
            Invoke-RestMethod -Uri https://download.microsoft.com/download/5/1/4/5144b772-d3b0-4e1c-a05b-5376f2ea0fc1/SSISDevOpsTools-1.0.0.0.exe -OutFile ./SSISDevOpsTools.exe        
            
            
            ./SSISDevOpsTools.exe /Q /C /T:$TMP_DIR
            $Env:path += ";$TMP_DIR"
        }
      shell: powershell
      id: setup-ssis
      if: ${{ inputs.ssis_action == 'build-sa' ||  inputs.ssis_action == 'ssis-deploy-win' || inputs.ssis_action == 'ssis-deploy-multiple-win'}}
    - run: |

        $Env:PATH += ";C:\Program Files (x86)\Microsoft Visual Studio\Installer"
        $VS_FILE = vswhere -products * -format json | jq '.[0]' | jq .productPath
        $TMP = Split-Path -Path $VS_FILE.replace('\\', '\')
        $VS_PATH = $TMP.replace('"', '')
        $Env:PATH += ";$VS_PATH"
        
        cd "${{ inputs.project_path }}"
        if (-Not $(Test-Path -Path "${{ inputs.output_path }}")) {
          mkdir "${{ inputs.output_path }}"
        }
        Get-ChildItem -Path .\ -Filter "*.sln" -File -Name| ForEach-Object {    

          $proj = "${{ inputs.project_path }}/" + $_
          echo "Path ----- >  + $proj"
          $directory=Split-Path -Path "$proj"
          cd "$directory"

          Get-ChildItem -Path "$directory" -Recurse -Depth 1 -Filter "*.dtproj" -File -Name| ForEach-Object { 
            # $directory=Split-Path -Path $proj
            echo $_
            $bin_path=Split-Path -Path "$directory\$_"
            echo $bin_path
            echo "devenv $_ /build ${{ inputs.project_configuration }} /Project $_"
            devenv "$_" /build "${{ inputs.project_configuration }}" /Project "$_"
            # echo "C:\Windows\System32\robocopy.exe '$bin_path' '${{ inputs.output_path }}' /s /r:10"
            # C:\Windows\System32\robocopy.exe "$bin_path\bin\${{ inputs.project_configuration }}" "${{ inputs.output_path }}" /s  
            $bin_path=$bin_path.TrimEnd('\')
            echo "::set-output name=gh_bin_path::$(echo $bin_path)"

            # C:\Windows\System32\robocopy.exe "$bin_path" "${{ inputs.output_path }}" /s /r:10 /ndl
            # Copy-Item -Path "$bin_path\bin\${{ inputs.project_configuration }}" -Destination "${{ inputs.output_path }}" 
            Get-ChildItem -Path "$bin_path\bin\${{ inputs.project_configuration }}"  -Recurse -File  -Name |  ForEach-Object {    
                echo "$bin_path\$_"
                Copy-Item -Path "$bin_path\bin\${{ inputs.project_configuration }}\$_" -Destination "${{ inputs.output_path }}"
            }
          }                
                    
        }
      id: ssis-build          
      shell: powershell
      if: ${{ inputs.ssis_action == 'build' }}
    - run: |        
        Start-Process powershell -Verb runAs
        echo "Standalone build"
        if (-Not $(Test-Path -Path "${{ inputs.output_path }}")) {
          mkdir "${{ inputs.output_path }}"
        }
        $TMP_DIR="C:\ssis_temp\1"
        if (-Not $(Test-Path -Path "$TMP_DIR")) {
          mkdir "$TMP_DIR"
        }
        if (-Not $(Get-Command SSISBuild -errorAction SilentlyContinue))
        {            
            echo "Installing SSIBuild"
            Invoke-RestMethod -Uri https://download.microsoft.com/download/5/1/4/5144b772-d3b0-4e1c-a05b-5376f2ea0fc1/SSISDevOpsTools-1.0.0.0.exe -OutFile ./SSISDevOpsTools.exe        
            
            
            ./SSISDevOpsTools.exe /Q /C /T:$TMP_DIR
            $Env:path += ";$TMP_DIR"
        }
        
        $directory="${{ inputs.project_path }}"
        $build="$TMP_DIR\a"
        
        if (-Not $(Test-Path -Path $build)) 
        {
          echo "creating $build"
          mkdir "$build"
        }
        else 
        {
          echo "$build exist"
        }
        
        if (-Not $(Test-Path -Path ${{ inputs.output_path }})) {
          mkdir "${{ inputs.output_path }}"
        }
        Remove-Item -path $build -recurse
        Remove-Item -path ${{ inputs.output_path }}/* -recurse        
        cd "${{ inputs.project_path }}"
        Get-ChildItem -Path .\ -Recurse -Depth 1 -Filter "*.dtproj" -File -Name| ForEach-Object { 
            $bin_path=Split-Path -Path "$directory\$_"
            SSISBuild -project:"$_" -configuration:Development -output:"$build"
        }

        Get-ChildItem -Path "$build" -Recurse  -File -Name| ForEach-Object { 
            Copy-Item -Path "$build\$_" -Destination "${{ inputs.output_path }}"
        }
      id: ssis-build-sa        
      shell: powershell
      if: ${{ inputs.ssis_action == 'build-sa' }}
    - run: |      
        $TMP_DIR="C:\ssis_temp\1"  
        if (-Not $(Get-Command SSISDeploy -errorAction SilentlyContinue))
        {
            echo "installing SSISDeploy"
            Invoke-RestMethod -Uri https://download.microsoft.com/download/5/1/4/5144b772-d3b0-4e1c-a05b-5376f2ea0fc1/SSISDevOpsTools-1.0.0.0.exe -OutFile ./SSISDevOpsTools.exe            
            if (Test-Path -Path $TMP_DIR) {
                Remove-Item -path $TMP_DIR -recurse
            }
            mkdir $TMP_DIR
            ./SSISDevOpsTools.exe /Q /C /T:$TMP_DIR
            $Env:path += ";$TMP_DIR"

        }
        echo "SQL Deply started"
        SSISDeploy -s:"${{ inputs.ssis_source }}" -d:catalog`;${{ inputs.ssis_destination }}`;${{ inputs.ssis_server }} -at:sql -u:${{ inputs.ssis_username }} -p:${{ inputs.ssis_password }}
      id: ssis-deploy-sql        
      shell: powershell
      if: ${{ inputs.ssis_action == 'ssis-deploy-sql' }}
    - run: |       
        Start-Process powershell -Verb runAs 
        # $TMP_DIR="C:\ssis_temp\1"
        # if (-Not $(Test-Path -Path "$TMP_DIR")) 
        # {
        #   mkdir "$TMP_DIR"
        # }
        # if (-Not $(Get-Command SSISDeploy -errorAction SilentlyContinue))
        # {            
        #     echo "Installing SSISDeploy"
        #     Invoke-RestMethod -Uri https://download.microsoft.com/download/5/1/4/5144b772-d3b0-4e1c-a05b-5376f2ea0fc1/SSISDevOpsTools-1.0.0.0.exe -OutFile ./SSISDevOpsTools.exe       
        #     Start-Process -wait ./SSISDevOpsTools.exe
            
        #     ./SSISDevOpsTools.exe /Q /C /T:$TMP_DIR
        #     $Env:path += ";$TMP_DIR"
        # }
        echo "Win Deply started"
        SSISDeploy -s:"${{ inputs.ssis_source }}" -d:catalog`;${{ inputs.ssis_destination }}`;${{ inputs.ssis_server }} -at:win 
      id: ssis-deploy-win        
      shell: powershell
      if: ${{ inputs.ssis_action == 'ssis-deploy-win'}}
    - run: |        
        Start-Process powershell -Verb runAs
        $TMP_DIR="C:\ssis_temp\1"
        if (-Not $(Test-Path -Path "$TMP_DIR")) 
        {
          mkdir "$TMP_DIR"
        }
        if (-Not $(Get-Command SSISDeploy -errorAction SilentlyContinue))
        {            
            echo "Installing SSISDeploy"
            Invoke-RestMethod -Uri https://download.microsoft.com/download/5/1/4/5144b772-d3b0-4e1c-a05b-5376f2ea0fc1/SSISDevOpsTools-1.0.0.0.exe -OutFile ./SSISDevOpsTools.exe        
            
            
            ./SSISDevOpsTools.exe /Q /C /T:$TMP_DIR
            $Env:path += ";$TMP_DIR"
        }
        echo "Win Deply started"
        cd "${{ inputs.ssis_source }}"
        Get-ChildItem -Path "${{ inputs.ssis_source }}" -Recurse -Depth 1 -Filter "*.ispac" -File -Name| ForEach-Object {             
            SSISDeploy -s:"$_" -d:catalog`;${{ inputs.ssis_destination }}`;${{ inputs.ssis_server }} -at:win 
        }
      shell: powershell
      id: ssis-deploy-win-multiple
      if: ${{ inputs.ssis_action == 'ssis-deploy-multiple-win'}}
    
    


      
