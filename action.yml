name: 'action yml'\ndescription: 'dotnet restore'\ninputs:\n  project_path:  \n    description: 'path'\n    required: true\n  project_configuration:  \n    description: 'test-path'\n    required: true\n  output_path:  \n    description: 'output_path'\n    required: true  \n  file_extenstion:  \n    description: 'file_extenstion'\n    required: false\n    default: '*.sln'\n  ssis_action:  \n    description: 'output_path'\n    required: true\n  ssis_tool_source:\n    description: 'microsoft or release'\n    required: false\n    default: 'microsoft'\noutputs:\n  random-number:\n    description: "Random number"\n    value: ${{ steps.random-number-generator.outputs.random-number }}\nruns:\n  using: "composite"\n  steps:\n    - run: |\n\n        $Env:PATH += ";C:\Program Files (x86)\Microsoft Visual Studio\Installer"\n        $VS_FILE = vswhere -products * -format json | jq '.[0]' | jq .productPath\n        $TMP = Split-Path -Path $VS_FILE.replace('\\', '\\')\n        $VS_PATH = $TMP.replace('"', '')\n        $Env:PATH += ";$VS_PATH"\n        \n        cd "${{ inputs.project_path }}"\n        if (-Not $(Test-Path -Path "${{ inputs.output_path }}")) {\n          mkdir "${{ inputs.output_path }}"\n        }\n        Get-ChildItem -Path .\ -Filter "*.sln" -File -Name| ForEach-Object {    \n\n          $proj = "${{ inputs.project_path }}/" + $_\n          echo "Path ----- >  + $proj"\n          $directory=Split-Path -Path "$proj"\n          cd "$directory"\n\n          Get-ChildItem -Path "$directory" -Recurse -Depth 1 -Filter "*.dtproj" -File -Name| ForEach-Object { \n            echo $_\n            $bin_path=Split-Path -Path "$directory\$_"\n            echo $bin_path\n            echo "devenv $_ /build ${{ inputs.project_configuration }} /Project $_"\n            devenv "$$_" /build "${{ inputs.project_configuration }}" /Project "$$_"\n            $bin_path=$bin_path.TrimEnd('\\')\n            echo "::set-output name=gh_bin_path::$(echo $bin_path)"\n            echo "PRINT BIN DEVELOPMENT---->>> $bin_path"\n            Get-ChildItem -Path "$bin_path\bin\${{ inputs.project_configuration }}"  -Recurse -File  -Name |  ForEach-Object {    \n                echo "$bin_path\$_"\n                Copy-Item -Path "$bin_path\bin\${{ inputs.project_configuration }}\$_" -Destination "${{ inputs.output_path }}"\n            }\n          }                \n        }\n      id: ssis-build          \n      shell: powershell\n      if: ${{ inputs.ssis_action == 'build' }}\n    - run: |        \n        Start-Process powershell -Verb runAs\n        echo "Standalone build job"\n        if (-Not $(Test-Path -Path "${{ inputs.output_path }}")) {\n          mkdir -f "${{ inputs.output_path }}"\n        }\n        else\n        {\n          Remove-Item -path ${{ inputs.output_path }}/* -recurse\n          mkdir -f "${{ inputs.output_path }}"\n        }\n        $TMP_DIR="C:\ssis_temp\1"\n        if (-Not $(Test-Path -Path "$TMP_DIR")) \n        {\n          mkdir -f "$TMP_DIR"\n        }\n        else\n        {\n          Remove-Item -path $TMP_DIR -recurse\n          mkdir "$TMP_DIR"\n        }\n        if (-Not $(Get-Command SSISBuild -errorAction SilentlyContinue))\n        {            \n            echo "Installing SSIBuild"\n            if ("${{ inputs.ssis_tool_source }}".ToLower() -eq "release") {\n              $tag="v1.0.0"\n              $asset="SSISDevOpsTools-1.0.0.0.exe"\n              $repo="snsinahub-org/ssis"\n              $api="https://api.github.com/repos/$repo/releases/tags/$tag"\n              $headers=@{ Authorization="Bearer $env:GITHUB_TOKEN"; Accept="application/vnd.github+json"; "X-GitHub-Api-Version"="2022-11-28"; "User-Agent"="ssis-action" }\n              $rel=Invoke-RestMethod -Headers $headers -Uri $api -Method GET\n              $a=$rel.assets | Where-Object { $_.name -eq $asset }\n              if(-not $a){ throw "Asset $asset not found in release $tag." }\n              Invoke-WebRequest -Headers @{ Authorization=$headers.Authorization; Accept="application/octet-stream"; "X-GitHub-Api-Version"="2022-11-28"; "User-Agent"="ssis-action" } -Uri $a.url -OutFile ./SSISDevOpsTools.exe\n            } else {\n              Invoke-RestMethod -Uri https://download.microsoft.com/download/5/1/4/5144b772-d3b0-4e1c-a05b-5376f2ea0fc1/SSISDevOpsTools-1.0.0.0.exe -OutFile ./SSISDevOpsTools.exe        \n            }\n            ./SSISDevOpsTools.exe /Q /C /T:$TMP_DIR | Wait-Job\n            $Env:path += ";$TMP_DIR"\n        }\n        $directory="${{ inputs.project_path }}"\n        $build="$TMP_DIR\a"\n        if (-Not $(Test-Path -Path $build)) \n        {\n          echo "creating $build"\n          mkdir -f "$build"\n        }\n        else \n        {\n          Remove-Item -path $build -recurse\n          mkdir -f "$build"        \n          echo "$build exist"\n        }\n        \n        cd "${{ inputs.project_path }}"\n        Get-ChildItem -Path .\ -Recurse -Depth 1 -Filter "*.dtproj" -File -Name| ForEach-Object { \n            $bin_path=Split-Path -Path "$directory\$_"\n            echo "$$_"\n            echo "SSISBuild -project:'${{ inputs.project_path }}\$_' -configuration:Development -output:$build"\n            SSISBuild -project:"${{ inputs.project_path }}\$_" -configuration:Development -output:"$build" -log:DIAG\n        }\n\n        Get-ChildItem -Path "$build" -Recurse  -File -Name| ForEach-Object { \n            echo "Copy-Item -Path '$build\$_' -Destination '${{ inputs.output_path }}'"\n            Copy-Item -Path "$build\$_" -Destination "${{ inputs.output_path }}"\n        }\n      id: ssis-build-sa        \n      shell: powershell\n      if: ${{ inputs.ssis_action == 'build-sa' }}\n    - run: |      \n        # $TMP_DIR="C:\ssis_temp\1"  \n        if (-Not $(Get-Command SSISDeploy -errorAction SilentlyContinue))\n        {\n            echo "installing SSISDeploy"\n            if ("${{ inputs.ssis_tool_source }}".ToLower() -eq "release") {\n              $tag="v1.0.0"\n              $asset="SSISDevOpsTools-1.0.0.0.exe"\n              $repo="snsinahub-org/ssis"\n              $api="https://api.github.com/repos/$repo/releases/tags/$tag"\n              $headers=@{ Authorization="Bearer $env:GITHUB_TOKEN"; Accept="application/vnd.github+json"; "X-GitHub-Api-Version"="2022-11-28"; "User-Agent"="ssis-action" }\n              $rel=Invoke-RestMethod -Headers $headers -Uri $api -Method GET\n              $a=$rel.assets | Where-Object { $_.name -eq $asset }\n              if(-not $a){ throw "Asset $asset not found in release $tag." }\n              Invoke-WebRequest -Headers @{ Authorization=$headers.Authorization; Accept="application/octet-stream"; "X-GitHub-Api-Version"="2022-11-28"; "User-Agent"="ssis-action" } -Uri $a.url -OutFile ./SSISDevOpsTools.exe\n            } else {\n              Invoke-RestMethod -Uri https://download.microsoft.com/download/5/1/4/5144b772-d3b0-4e1c-a05b-5376f2ea0fc1/SSISDevOpsTools-1.0.0.0.exe -OutFile ./SSISDevOpsTools.exe            \n            }\n            if (Test-Path -Path $TMP_DIR) {\n                Remove-Item -path $TMP_DIR -recurse\n            }\n            mkdir $TMP_DIR\n            ./SSISDevOpsTools.exe /Q /C /T:$TMP_DIR | Wait-Job\n            $Env:path += ";$TMP_DIR"\n        }\n        echo "SQL Deply started"        \n        SSISDeploy -s:"${{ inputs.ssis_source }}" -d:catalog`;${{ inputs.ssis_destination }}`;${{ inputs.ssis_server }} -at:sql -u:${{ inputs.ssis_username }} -p:${{ inputs.ssis_password }}\n      id: ssis-deploy-sql        \n      shell: powershell\n      if: ${{ inputs.ssis_action == 'ssis-deploy-sql' }}\n    - run: |       \n        # Start-Process powershell -Verb runAs \n        $TMP_DIR="C:\ssis_temp\1"\n        if (-Not $(Test-Path -Path "$TMP_DIR")) \n        {\n          mkdir "$TMP_DIR"\n        }\n        else\n        {\n          Remove-Item -path $TMP_DIR -recurse\n          mkdir "$TMP_DIR"\n        }\n        if (-Not $(Get-Command SSISDeploy -errorAction SilentlyContinue))\n        {            \n            echo "Installing SSISDeploy"\n            if ("${{ inputs.ssis_tool_source }}".ToLower() -eq "release") {\n              $tag="v1.0.0"\n              $asset="SSISDevOpsTools-1.0.0.0.exe"\n              $repo="snsinahub-org/ssis"\n              $api="https://api.github.com/repos/$repo/releases/tags/$tag"\n              $headers=@{ Authorization="Bearer $env:GITHUB_TOKEN"; Accept="application/vnd.github+json"; "X-GitHub-Api-Version"="2022-11-28"; "User-Agent"="ssis-action" }\n              $rel=Invoke-RestMethod -Headers $headers -Uri $api -Method GET\n              $a=$rel.assets | Where-Object { $_.name -eq $asset }\n              if(-not $a){ throw "Asset $asset not found in release $tag." }\n              Invoke-WebRequest -Headers @{ Authorization=$headers.Authorization; Accept="application/octet-stream"; "X-GitHub-Api-Version"="2022-11-28"; "User-Agent"="ssis-action" } -Uri $a.url -OutFile ./SSISDevOpsTools.exe\n            } else {\n              Invoke-RestMethod -Uri https://download.microsoft.com/download/5/1/4/5144b772-d3b0-4e1c-a05b-5376f2ea0fc1/SSISDevOpsTools-1.0.0.0.exe -OutFile ./SSISDevOpsTools.exe \n            }\n            ./SSISDevOpsTools.exe /Q /C /T:$TMP_DIR | Wait-Job\n            $Env:path += ";$TMP_DIR"\n        }\n        echo "Win Deply started"\n        SSISDeploy -s:"${{ inputs.ssis_source }}" -d:catalog`;${{ inputs.ssis_destination }}`;${{ inputs.ssis_server }} -at:win \n      id: ssis-deploy-win        \n      shell: powershell\n      if: ${{ inputs.ssis_action == 'ssis-deploy-win'}}\n    - run: |        \n        # Start-Process powershell -Verb runAs\n        $TMP_DIR="C:\ssis_temp\1"\n        if (-Not $(Test-Path -Path "$TMP_DIR")) \n        {\n          mkdir "$TMP_DIR"\n        }\n        else\n        {\n          Remove-Item -path $TMP_DIR -recurse\n          mkdir "$TMP_DIR"\n        }\n        if (-Not $(Get-Command SSISDeploy -errorAction SilentlyContinue))\n        {            \n            echo "Installing SSISDeploy"\n            if ("${{ inputs.ssis_tool_source }}".ToLower() -eq "release") {\n              $tag="v1.0.0"\n              $asset="SSISDevOpsTools-1.0.0.0.exe"\n              $repo="snsinahub-org/ssis"\n              $api="https://api.github.com/repos/$repo/releases/tags/$tag"\n              $headers=@{ Authorization="Bearer $env:GITHUB_TOKEN"; Accept="application/vnd.github+json"; "X-GitHub-Api-Version"="2022-11-28"; "User-Agent"="ssis-action" }\n              $rel=Invoke-RestMethod -Headers $headers -Uri $api -Method GET\n              $a=$rel.assets | Where-Object { $_.name -eq $asset }\n              if(-not $a){ throw "Asset $asset not found in release $tag." }\n              Invoke-WebRequest -Headers @{ Authorization=$headers.Authorization; Accept="application/octet-stream"; "X-GitHub-Api-Version"="2022-11-28"; "User-Agent"="ssis-action" } -Uri $a.url -OutFile ./SSISDevOpsTools.exe\n            } else {\n              Invoke-RestMethod -Uri https://download.microsoft.com/download/5/1/4/5144b772-d3b0-4e1c-a05b-5376f2ea0fc1/SSISDevOpsTools-1.0.0.0.exe -OutFile ./SSISDevOpsTools.exe        \n            }\n            ./SSISDevOpsTools.exe /Q /C /T:$TMP_DIR | Wait-Job\n            $Env:path += ";$TMP_DIR"\n        }\n        echo "Win Deply started"\n        cd "${{ inputs.ssis_source }}"\n        Get-ChildItem -Path "${{ inputs.ssis_source }}" -Recurse -Depth 1 -Filter "*.ispac" -File -Name| ForEach-Object {             \n            SSISDeploy -s:"${{ inputs.ssis_source }}\$_" -d:catalog`;${{ inputs.ssis_destination }}`;${{ inputs.ssis_server }} -at:win \n        }\n      shell: powershell\n      id: ssis-deploy-win-multiple\n      if: ${{ inputs.ssis_action == 'ssis-deploy-multiple-win'}}\n