name: 'action yml'
description: 'dotnet restore'
inputs:
  project_path:  
    description: 'path'
    required: true
  project_configuration:  
    description: 'test-path'
    required: true
  output_path:  
    description: 'output_path'
    required: true  
  file_extenstion:  
    description: 'file_extenstion'
    required: false
    default: '*.sln'
  ssis_action:  
    description: 'output_path'
    required: true
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - run: |

        $Env:PATH += ";C:\Program Files (x86)\Microsoft Visual Studio\Installer"
        $VS_FILE = vswhere -products * -format json | jq '.[0]' | jq .productPath
        $TMP = Split-Path -Path $VS_FILE.replace('\\', '\')
        $VS_PATH = $TMP.replace('"', '')
        $Env:PATH += ";$VS_PATH"
        cd "${{ inputs.project_path }}"
        Get-ChildItem -Path .\ -Filter "*.sln" -File -Name| ForEach-Object {    

          $proj = "${{ inputs.project_path }}/" + $_
          echo "Path ----- >  + $proj"
          $directory=Split-Path -Path "$proj"
          cd "$directory"

          Get-ChildItem -Path "$directory" -Recurse -Depth 1 -Filter "*.dtproj" -File -Name| ForEach-Object { 
            # $directory=Split-Path -Path $proj
            echo $_
            $bin_path=Split-Path -Path "$directory\$_"
            echo $bin_path
            echo "devenv $_ /build ${{ inputs.project_configuration }} /Project $_"
            devenv "$_" /build "${{ inputs.project_configuration }}" /Project "$_"
            # echo "C:\Windows\System32\robocopy.exe '$bin_path' '${{ inputs.output_path }}' /s /r:10"
            # C:\Windows\System32\robocopy.exe "$bin_path\bin\${{ inputs.project_configuration }}" "${{ inputs.output_path }}" /s  
            $bin_path=$bin_path.TrimEnd('\')
            echo "::set-output name=gh_bin_path::$(echo $bin_path)"

            # C:\Windows\System32\robocopy.exe "$bin_path" "${{ inputs.output_path }}" /s /r:10 /ndl
            # Copy-Item -Path "$bin_path\bin\${{ inputs.project_configuration }}" -Destination "${{ inputs.output_path }}" 
            Get-ChildItem -Path "$bin_path\bin\${{ inputs.project_configuration }}"  -Recurse -File  -Name |  ForEach-Object {    
                echo "$bin_path\$_"
                Copy-Item -Path "$bin_path\bin\${{ inputs.project_configuration }}\$_" -Destination "${{ inputs.output_path }}"
            }
          }                
                    
        }
      id: ssis-build          
      shell: powershell
      if: ${{ inputs.ssis_action == 'build' }}
    - run: |        
        if (-Not $(Get-Command SSISBuild -errorAction SilentlyContinue))
        {
            echo "Installing SSIBuild"
            Invoke-RestMethod -Uri https://download.microsoft.com/download/5/1/4/5144b772-d3b0-4e1c-a05b-5376f2ea0fc1/SSISDevOpsTools-1.0.0.0.exe -OutFile ./SSISDevOpsTools.exe
            $TMP_DIR="C:\ssis_temp\1"
            if (Test-Path -Path $TMP_DIR) {
                Remove-Item -path $TMP_DIR -recurse
            }
            mkdir $TMP_DIR
            ./SSISDevOpsTools.exe /Q /C /T:$TMP_DIR
            $Env:path += ";$TMP_DIR"
        }
        
        $directory="${{ inputs.project_path }}"
        $build="$TMP_DIR\a"
        echo -----BUILD
        echo $build
        if (-Not $(Test-Path -Path $build)) {
          mkdir $build
        }
        if (-Not $(Test-Path -Path ${{ inputs.output_path }})) {
          mkdir ${{ inputs.output_path }}
        }
        Remove-Item -path $build -recurse
        Remove-Item -path ${{ inputs.output_path }}/* -recurse
        echo ----Directory
        echo $directory
        echo ---CD
        cd $directory
        echo ----LS
        ls
        Get-ChildItem -Path .\ -Recurse -Depth 1 -Filter "*.dtproj" -File -Name| ForEach-Object { 
            $bin_path=Split-Path -Path "$directory\$_"
            echo $bin_path
            echo -----
            echo $_
            echo ----    
            echo "SSISBuild -project:'$_' -configuration:Development -output:'$build'"
            SSISBuild -project:"$_" -configuration:Development -output:"$build"
        }

        Get-ChildItem -Path "$build" -Recurse  -File -Name| ForEach-Object { 
            echo '>>>>'
            echo $_
            echo '<<<<'
            echo "$build\$_"
            Copy-Item -Path "$build\$_" -Destination "${{ inputs.output_path }}"
        }
      id: ssis-build-sa        
      shell: powershell
      if: ${{ inputs.ssis_action == 'build-sa' }}
    


      
